@model GameConfigModel

<script src="~/js/chess.js" asp-append-version="true"></script>
<script src="~/js/chessboard-0.3.0.js" asp-append-version="true"></script>
<link rel="stylesheet" href="~/css/chessboard-0.3.0.min.css" />

<div id="chessboard" style="width:692px"></div>

<script>
    const { ipcRenderer } = require("electron");
    const playerColor = "@Model.StartColor";
    const depth = @Model.Depth;

    let board,
        game = new Chess();

    let removeGreySquares = function() {
        $('#chessboard .square-55d63').css('background', '');
    };

    let doMachineMove = function() {
        let currentMove = {
            Fen: game.fen(),
            Depth: depth
        };
        let move = ipcRenderer.sendSync("get-next-move", JSON.stringify(currentMove));
        let moveObj = JSON.parse(move);
        game.move(moveObj.engineMove);
        board.position(game.fen());
    }

    let greySquare = function(square) {
        let squareEl = $('#chessboard .square-' + square);
        
        let background = '#a9a9a9';
        if (squareEl.hasClass('black-3c85d') === true) {
            background = '#696969';
        }

        squareEl.css('background', background);
    };

    let onDragStart = function(source, piece) {
        // do not pick up pieces if the game is over
        // or if it's not that side's turn
        let regex = playerColor === 'b' ? /^w/ : /^b/; 
        if (game.game_over() === true ||
            (game.turn() === playerColor && piece.search(regex) !== -1)) {
            return false;
        }
    };

    let onDrop = function(source, target) {
        removeGreySquares();

        // see if the move is legal
        let move = game.move({
            from: source,
            to: target,
            promotion: 'q' // NOTE: always promote to a queen for example simplicity
        });

        // illegal move
        if (move === null) return 'snapback';
    };

    let onMouseoverSquare = function(square, piece) {
        // get list of possible moves for this square
        let moves = game.moves({
            square: square,
            verbose: true
        });

        // exit if there are no moves available for this square
        if (moves.length === 0) return;

        // highlight the square they moused over
        greySquare(square);

        // highlight the possible squares for this piece
        for (let i = 0; i < moves.length; i++) {
            greySquare(moves[i].to);
        }
    };

    let onMouseoutSquare = function(square, piece) {
        removeGreySquares();
    };

    let onSnapEnd = function() {
        board.position(game.fen());
        doMachineMove();
    };

    let cfg = {
        draggable: true,
        position: 'start',
        onDragStart: onDragStart,
        onDrop: onDrop,
        onMouseoutSquare: onMouseoutSquare,
        onMouseoverSquare: onMouseoverSquare,
        onSnapEnd: onSnapEnd
    };
    
    board = ChessBoard('chessboard', cfg);
    board.orientation(playerColor === 'b'? 'black' : 'white');

    if (playerColor == "b")
        doMachineMove();
</script>